{"ast":null,"code":"import { Subject } from 'rxjs';\nimport { Davenfor } from '../shared/models/davenfor.model';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../shared/services/http.service\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"../shared/services/davening.service\";\nimport * as i4 from \"./auth/auth.service\";\nexport let AdminService = /*#__PURE__*/(() => {\n  class AdminService {\n    constructor(httpService, router, daveningService, authService) {\n      this.httpService = httpService;\n      this.router = router;\n      this.daveningService = daveningService;\n      this.authService = authService;\n      this.loading = false;\n      this.chagim = [{\n        \"id\": 1,\n        \"englishName\": \"Rosh Hashana\",\n        \"hebrewName\": \"ראש השנה\"\n      }, {\n        \"id\": 2,\n        \"englishName\": \"Yom Kippur\",\n        \"hebrewName\": \"יום כיפור\"\n      }, {\n        \"id\": 3,\n        \"englishName\": \"Sukkot\",\n        \"hebrewName\": \"סוכות\"\n      }, {\n        \"id\": 4,\n        \"englishName\": \"Shmini Atzeret\",\n        \"hebrewName\": \"שמיני עצרת\"\n      }, {\n        \"id\": 5,\n        \"englishName\": \"Pesach\",\n        \"hebrewName\": \"פסח\"\n      }, {\n        \"id\": 6,\n        \"englishName\": \"Shavuot\",\n        \"hebrewName\": \"שבועות\"\n      }];\n      this.davenforToEdit = null;\n      this.davenforsChanged = new Subject();\n      this.davenersChanged = new Subject();\n      this.davenforAdded = new Subject();\n      this.settingsUpdated = new Subject();\n      this.adminSettings = null;\n      this.listsSub = null;\n      this.listsSub = this.authService.loggedIn.subscribe(() => {\n        this.populateAdminDavenfors();\n        this.populateWeeklyCategory(); //this fills in the default category from DB\n        this.populateAdminSettings();\n        this.populateParashot();\n        this.populateCategories();\n        this.populateCurrentParasha();\n        this.getDaveners();\n      });\n    }\n    populateAdminDavenfors() {\n      this.loading = true;\n      this.httpService.getDavenfors('admin/davenfors').subscribe(names => {\n        this.davenfors = names;\n        this.davenforsChanged.next(names);\n        this.loading = false;\n      }, error => {\n        this.daveningService.errorMessage = \"We could not retrieve the names.  Please contact the admin.\";\n        this.loading = false;\n      });\n    }\n    populateAdminSettings() {\n      if (this.authService.adminLogin) {\n        this.loading = true;\n        this.httpService.getAdminSettings(this.authService.adminLogin.email).subscribe(response => {\n          this.adminSettings = response;\n          this.settingsUpdated.next(response);\n          this.loading = false;\n        }, error => {\n          this.daveningService.errorMessage = \"There was a problem retrieving the admin settings\";\n          console.log(error);\n          this.loading = false;\n        });\n      }\n    }\n    getDaveners() {\n      this.loading = true;\n      this.httpService.getDaveners().subscribe(daveners => {\n        this.daveners = daveners;\n        this.davenersChanged.next(daveners);\n        this.loading = false;\n      }, error => {\n        this.daveningService.errorMessage = \"There was a problem retriving the list of emails\";\n        console.log(error);\n        this.loading = false;\n      });\n    }\n    editDavener(davenerToEdit) {\n      this.loading = true;\n      this.httpService.editDavener(davenerToEdit).subscribe(daveners => {\n        this.daveners = daveners;\n        this.loading = false;\n        this.davenersChanged.next(daveners);\n      }, error => {\n        this.daveningService.errorMessage = \"We are sorry. There was an error saving the new edits.\";\n        this.loading = false;\n      });\n    }\n    deleteDavener(davenerId, davenerEmail) {\n      this.loading = true;\n      this.httpService.deleteDavener(davenerId).subscribe(() => {\n        this.getDaveners(); //refreshing list reflects deleted item.\n        this.loading = false;\n      }, error => {\n        this.daveningService.errorMessage = `We are sorry, there was a problem removing \"${davenerEmail}\" from the davening list.`;\n        console.log(error);\n        this.loading = false;\n      });\n    }\n    activateDavener(davener) {\n      this.loading = true;\n      this.httpService.activateDavener(davener).subscribe(() => {\n        this.changeToActivate(davener);\n        this.loading = false;\n      }, error => {\n        this.daveningService.errorMessage = `An error occurred when activating ${davener.email}`;\n        console.log(error);\n        this.loading = false;\n      });\n    }\n    disactivateDavener(davener) {\n      this.loading = true;\n      this.httpService.disactivateDavener(davener).subscribe(() => {\n        this.changeToDisactivate(davener);\n        this.loading = false;\n      }, error => {\n        this.daveningService.errorMessage = `An error occurred when disactivating ${davener.email}`;\n        console.log(error);\n        this.loading = false;\n      });\n    }\n    populateCategories() {\n      this.loading = true;\n      this.httpService.getCategories().subscribe(categories => {\n        this.categories = categories;\n        this.loading = false;\n      }, error => {\n        console.log(error);\n        this.loading = false;\n      });\n    }\n    populateCurrentParasha() {\n      this.loading = true;\n      this.httpService.getCurrentParasha().subscribe(response => {\n        this.currentParasha = response;\n        this.loading = false;\n      }, error => {\n        console.log(error);\n        this.loading = false;\n      });\n    }\n    populateParashot() {\n      this.loading = true;\n      this.httpService.getParashot().subscribe(response => {\n        this.parashot = response;\n        this.loading = false;\n      }, error => {\n        console.log(error);\n        this.loading = false;\n      });\n    }\n    getParashot() {\n      return this.parashot;\n    }\n    changeToDisactivate(davener) {\n      const index = this.daveners.indexOf(davener);\n      this.daveners[index].active = false;\n      this.davenersChanged.next(this.daveners);\n    }\n    changeToActivate(davener) {\n      const index = this.daveners.indexOf(davener);\n      this.daveners[index].active = true;\n      this.davenersChanged.next(this.daveners);\n    }\n    addDavener(davener) {\n      this.loading = true;\n      this.httpService.addDavener(davener).subscribe(daveners => {\n        this.daveners = daveners;\n        this.davenersChanged.next(daveners);\n        this.daveningService.successMessage = `${davener.email} will now receive the davening lists.`;\n        this.loading = false;\n      }, error => {\n        this.daveningService.errorMessage = `We are sorry. There was an error adding ${davener.email}`;\n        this.loading = false;\n      });\n    }\n    deleteDavenfor(davenforId, englishName) {\n      this.loading = true;\n      this.httpService.deleteDavenfor('admin/delete/' + davenforId).subscribe(updatedDavenfors => {\n        this.davenfors = updatedDavenfors;\n        this.davenforsChanged.next(updatedDavenfors);\n        this.daveningService.successMessage = `The name '${englishName}' has been deleted`;\n        this.loading = false;\n      },\n      //refreshing list reflects deleted item.\n      //refreshing list reflects deleted item.\n      error => {\n        this.daveningService.errorMessage = `We are sorry.  There was an error deleting ${englishName}`;\n        this.loading = false;\n      });\n    }\n    addDavenfor(basicInfo, announceSuccess = true) {\n      const newDavenfor = this.constructNewDavenfor(basicInfo);\n      this.loading = true;\n      this.httpService.addDavenfor(basicInfo.submitterEmail, newDavenfor).subscribe(() => {\n        this.populateAdminDavenfors();\n        this.davenforAdded.next(true); //to have guest and admin home pages route accordingly to the names list   \n        if (announceSuccess) {\n          this.daveningService.successMessage = `The name '${basicInfo.nameEnglish}' has been added to the '${basicInfo.category.english}' list`;\n        }\n        this.loading = false;\n      }, error => {\n        this.daveningService.errorMessage = `We are sorry.  There was an error adding ${basicInfo.nameEnglish}`;\n        this.loading = false;\n      });\n    }\n    editDavenfor(davenfor) {\n      this.loading = true;\n      this.httpService.adminEditDavenfor('admin/updatedavenfor', davenfor).subscribe(() => {\n        this.populateAdminDavenfors();\n        this.router.navigate(['admin/names']);\n        this.loading = false;\n      }, error => {\n        this.daveningService.errorMessage = \"We are sorry. There was an error when saving the new edits.\";\n        this.loading = false;\n      });\n    }\n    populateWeeklyCategory() {\n      this.loading = true;\n      this.httpService.getCurrentCategory().subscribe(incomingCategory => {\n        this.weeklyCategory = incomingCategory;\n        this.loading = false;\n      }, error => {\n        console.log(error);\n        this.loading = false;\n      });\n    }\n    getWeeklyCategory() {\n      return this.weeklyCategory;\n    }\n    previewList(weeklyInfo) {\n      this.httpService.preview(weeklyInfo).subscribe(res => {\n        var win = window.open(\"\", \"Preview this week's list\", \"toolbar=no,location=no,directories=no,status=no,menubar=no,scrollbars=yes,resizable=yes,width=780,height=\" + (screen.height - 20) + \",top=20,left=\" + (screen.width - 840));\n        win.document.body.innerHTML = res;\n      }, error => {\n        this.daveningService.errorMessage = \"There was an error generating the preview.\";\n      });\n    }\n    verify(weeklyInfo, password) {\n      this.httpService.verify(password, this.authService.adminLogin.email).subscribe(response => {\n        if (response) {\n          this.sendWeekly(weeklyInfo);\n        } else {\n          this.daveningService.errorMessage = \"Password is incorrect.\";\n        }\n      }, error => {\n        this.daveningService.errorMessage = \"There was a problem verifying the Admin password.\";\n        console.log(error);\n      });\n    }\n    sendWeekly(weeklyInfo) {\n      this.httpService.sendWeekly(weeklyInfo).subscribe(() => {\n        this.daveningService.successMessage = \"Weekly list has been sent out to active subscribers \";\n      }, error => {\n        this.daveningService.errorMessage = \"There was a problem sending out the weekly list. \";\n        console.log(error);\n      });\n    }\n    sendUrgent(formInfo, addToWeekly) {\n      if (!formInfo.submitterEmail) {\n        /*If no email was put in, fill in admin email in case it should be sent out.\r\n        Admin will monitor it. */\n        formInfo.submitterEmail = this.authService.adminLogin.email;\n      }\n      if (addToWeekly) {\n        this.addDavenfor(formInfo, false);\n      }\n      const urgentDavenfor = this.constructNewDavenfor(formInfo);\n      this.httpService.sendUrgent(urgentDavenfor).subscribe(() => {\n        this.daveningService.successMessage = `The name ${formInfo.nameEnglish} has been sent out to all subscribers`;\n      }, error => {\n        this.daveningService.errorMessage = `We are sorry.  The name ${formInfo.nameEnglish} could not be sent to subscribers`;\n      });\n    }\n    getCategory(id) {\n      //double equal sign (instead of triple) since incoming id is a string while category.id is a number.\n      return this.categories.find(category => category.id == id);\n    }\n    findBanim() {\n      let banim = null;\n      this.categories.forEach(category => {\n        if (category.english === 'banim') banim = category;\n      });\n      return banim;\n    }\n    editSettings(updatedSettings) {\n      this.loading = true;\n      debugger;\n      this.httpService.editAdminSettings(updatedSettings).subscribe(success => {\n        if (success) {\n          this.settingsUpdated.next(updatedSettings);\n          this.daveningService.successMessage = \"Changes were saved\";\n        } else {\n          //server returned a value (not error) which is not true\n          this.daveningService.errorMessage = \"The system encountered an error, no changes were made.\";\n        }\n        this.loading = false;\n      }, error => {\n        this.daveningService.errorMessage = \"The system encountered an error, no changes were made.\";\n        this.loading = false;\n      });\n    }\n    constructNewDavenfor(basicInfo) {\n      const today = new Date().toISOString().split('T')[0]; //used multiple times in the new Davenfor.\n      return new Davenfor(-1, basicInfo.submitterEmail, basicInfo.category, basicInfo.nameHebrew, basicInfo.nameEnglish, basicInfo.nameHebrewSpouse, basicInfo.nameEnglishSpouse, basicInfo.submitterToReceive, today,\n      //lastConfirmedAt\n      null,\n      //expireAt: server will set the right one\n      today,\n      //createdAt\n      today); //updatedAt\n    }\n    ngOnDestroy() {\n      this.listsSub.unsubscribe();\n    }\n    static #_ = this.ɵfac = function AdminService_Factory(t) {\n      return new (t || AdminService)(i0.ɵɵinject(i1.HttpService), i0.ɵɵinject(i2.Router), i0.ɵɵinject(i3.DaveningService), i0.ɵɵinject(i4.AuthService));\n    };\n    static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: AdminService,\n      factory: AdminService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n  return AdminService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}