{"ast":null,"code":"import { Subject } from 'rxjs';\nimport { Signin } from 'src/app/shared/models/signin.model';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"src/app/shared/services/http.service\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"src/app/shared/services/davening.service\";\nexport let AuthService = /*#__PURE__*/(() => {\n  class AuthService {\n    constructor(httpService, router, daveningService) {\n      this.httpService = httpService;\n      this.router = router;\n      this.daveningService = daveningService;\n      this.loading = false;\n      this.loggedIn = new Subject();\n      this.adminLogin = new Signin();\n    }\n    getToken() {\n      return localStorage.getItem(\"token\");\n    }\n    login(email, password) {\n      this.loading = true;\n      this.httpService.login(email, password).subscribe(response => {\n        localStorage.setItem(\"isLoggedIn\", \"true\");\n        localStorage.setItem(\"token\", response.token);\n        localStorage.setItem(\"email\", response.email);\n        this.adminLogin.setEmail(localStorage.getItem(\"email\"));\n        this.loggedIn.next(true);\n        this.adminLogin.setId(response.id);\n        this.loading = false;\n        this.router.navigate(['admin']);\n      }, error => {\n        this.daveningService.errorMessage = \"Please check your email and password again. \";\n        this.loading = false;\n      });\n    }\n    logout() {\n      localStorage.setItem(\"isLoggedIn\", \"false\");\n      localStorage.removeItem(\"token\");\n      localStorage.removeItem(\"email\");\n      this.adminLogin = null;\n      this.router.navigate(['admin']);\n    }\n    static #_ = this.ɵfac = function AuthService_Factory(t) {\n      return new (t || AuthService)(i0.ɵɵinject(i1.HttpService), i0.ɵɵinject(i2.Router), i0.ɵɵinject(i3.DaveningService));\n    };\n    static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: AuthService,\n      factory: AuthService.ɵfac,\n      providedIn: 'root' /*note if there are problems: Using providedIn: 'any' for an @Injectable or InjectionToken is deprecated in v15*/\n    });\n  }\n  return AuthService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}