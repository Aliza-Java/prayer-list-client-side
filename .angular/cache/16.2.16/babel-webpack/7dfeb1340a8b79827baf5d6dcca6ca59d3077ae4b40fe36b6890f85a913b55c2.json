{"ast":null,"code":"import { UntypedFormControl, UntypedFormGroup, Validators } from '@angular/forms';\nimport { Davenfor } from 'src/app/shared/models/davenfor.model';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"src/app/shared/services/davening.service\";\nimport * as i2 from \"src/app/shared/services/http.service\";\nimport * as i3 from \"src/app/admin/admin.service\";\nimport * as i4 from \"@angular/router\";\nimport * as i5 from \"@angular/common\";\nimport * as i6 from \"@angular/forms\";\nimport * as i7 from \"../../../shared/loading-spinner/loading-spinner.component\";\nfunction AdminEditNameComponent_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 3);\n    i0.ɵɵelement(1, \"app-loading-spinner\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction AdminEditNameComponent_div_2_span_10_span_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\");\n    i0.ɵɵtext(1, \"Submitter Email is required\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction AdminEditNameComponent_div_2_span_10_span_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\");\n    i0.ɵɵtext(1, \"Please enter a valid email\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction AdminEditNameComponent_div_2_span_10_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\", 29);\n    i0.ɵɵtemplate(1, AdminEditNameComponent_div_2_span_10_span_1_Template, 2, 0, \"span\", 2);\n    i0.ɵɵtemplate(2, AdminEditNameComponent_div_2_span_10_span_2_Template, 2, 0, \"span\", 2);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r2.nameForm.get(\"submitterEmail\").errors[\"required\"]);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r2.nameForm.get(\"submitterEmail\").errors[\"email\"]);\n  }\n}\nfunction AdminEditNameComponent_div_2_span_17_span_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\", 31);\n    i0.ɵɵtext(1, \"English letters and spaces\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction AdminEditNameComponent_div_2_span_17_span_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\", 31);\n    i0.ɵɵtext(1, \"This field is required\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction AdminEditNameComponent_div_2_span_17_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\", 29);\n    i0.ɵɵtemplate(1, AdminEditNameComponent_div_2_span_17_span_1_Template, 2, 0, \"span\", 30);\n    i0.ɵɵtemplate(2, AdminEditNameComponent_div_2_span_17_span_2_Template, 2, 0, \"span\", 30);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r3 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r3.nameForm.get(\"english\").errors[\"pattern\"]);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r3.nameForm.get(\"english\").errors[\"required\"]);\n  }\n}\nfunction AdminEditNameComponent_div_2_div_22_span_2_span_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\", 31);\n    i0.ɵɵtext(1, \"English letters and spaces\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction AdminEditNameComponent_div_2_div_22_span_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\", 29);\n    i0.ɵɵtemplate(1, AdminEditNameComponent_div_2_div_22_span_2_span_1_Template, 2, 0, \"span\", 30);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r12 = i0.ɵɵnextContext(3);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r12.nameForm.get(\"spouseEnglish\").errors[\"pattern\"]);\n  }\n}\nfunction AdminEditNameComponent_div_2_div_22_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\")(1, \"div\", 13);\n    i0.ɵɵtemplate(2, AdminEditNameComponent_div_2_div_22_span_2_Template, 2, 1, \"span\", 9);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"div\", 14)(4, \"label\", 32);\n    i0.ɵɵtext(5, \"Optional: Spouse name\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(6, \"input\", 33);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const ctx_r4 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngIf\", !ctx_r4.nameForm.get(\"spouseEnglish\").valid && ctx_r4.nameForm.get(\"spouseEnglish\").touched);\n  }\n}\nfunction AdminEditNameComponent_div_2_span_25_span_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\", 31);\n    i0.ɵɵtext(1, \"Hebrew letters and spaces\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction AdminEditNameComponent_div_2_span_25_span_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\", 31);\n    i0.ɵɵtext(1, \"This field is required\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction AdminEditNameComponent_div_2_span_25_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\", 29);\n    i0.ɵɵtemplate(1, AdminEditNameComponent_div_2_span_25_span_1_Template, 2, 0, \"span\", 30);\n    i0.ɵɵtemplate(2, AdminEditNameComponent_div_2_span_25_span_2_Template, 2, 0, \"span\", 30);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r5 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r5.nameForm.get(\"hebrew\").errors[\"pattern\"]);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r5.nameForm.get(\"hebrew\").errors[\"required\"]);\n  }\n}\nfunction AdminEditNameComponent_div_2_div_30_span_2_span_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\", 31);\n    i0.ɵɵtext(1, \"Hebrew letters and spaces\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction AdminEditNameComponent_div_2_div_30_span_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\", 29);\n    i0.ɵɵtemplate(1, AdminEditNameComponent_div_2_div_30_span_2_span_1_Template, 2, 0, \"span\", 30);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r16 = i0.ɵɵnextContext(3);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r16.nameForm.get(\"spouseHebrew\").errors[\"pattern\"]);\n  }\n}\nfunction AdminEditNameComponent_div_2_div_30_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\")(1, \"div\", 13);\n    i0.ɵɵtemplate(2, AdminEditNameComponent_div_2_div_30_span_2_Template, 2, 1, \"span\", 9);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"div\", 14)(4, \"label\", 34);\n    i0.ɵɵtext(5, \"Optional: \\u05E9\\u05DD \\u05D1\\u05DF \\u05D4\\u05D6\\u05D5\\u05D2 \\u05D1\\u05E2\\u05D1\\u05E8\\u05D9\\u05EA \");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(6, \"input\", 35);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const ctx_r6 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngIf\", !ctx_r6.nameForm.get(\"spouseHebrew\").valid && ctx_r6.nameForm.get(\"spouseHebrew\").touched);\n  }\n}\nfunction AdminEditNameComponent_div_2_option_45_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"option\", 36);\n    i0.ɵɵtext(1);\n    i0.ɵɵpipe(2, \"titlecase\");\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const category_r18 = ctx.$implicit;\n    i0.ɵɵproperty(\"value\", category_r18.id);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\"\", i0.ɵɵpipeBind1(2, 2, category_r18.english), \" \");\n  }\n}\nfunction AdminEditNameComponent_div_2_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r20 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\")(1, \"div\", 4)(2, \"div\", 5)(3, \"h5\");\n    i0.ɵɵtext(4, \"Fields marked with (*) are required.\");\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(5, \"div\", 6)(6, \"button\", 7);\n    i0.ɵɵlistener(\"click\", function AdminEditNameComponent_div_2_Template_button_click_6_listener() {\n      i0.ɵɵrestoreView(_r20);\n      const ctx_r19 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r19.cancel());\n    });\n    i0.ɵɵtext(7, \"Cancel\");\n    i0.ɵɵelementEnd()()();\n    i0.ɵɵelementStart(8, \"div\", 4)(9, \"div\", 8);\n    i0.ɵɵtemplate(10, AdminEditNameComponent_div_2_span_10_Template, 3, 2, \"span\", 9);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(11, \"div\", 10)(12, \"label\", 11);\n    i0.ɵɵtext(13, \"* Submitter's email\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(14, \"input\", 12);\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(15, \"div\", 4)(16, \"div\", 13);\n    i0.ɵɵtemplate(17, AdminEditNameComponent_div_2_span_17_Template, 3, 2, \"span\", 9);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(18, \"div\", 14)(19, \"label\", 15);\n    i0.ɵɵtext(20, \"* Full Name \");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(21, \"input\", 16);\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(22, AdminEditNameComponent_div_2_div_22_Template, 7, 1, \"div\", 2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(23, \"div\", 4)(24, \"div\", 13);\n    i0.ɵɵtemplate(25, AdminEditNameComponent_div_2_span_25_Template, 3, 2, \"span\", 9);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(26, \"div\", 14)(27, \"label\", 17);\n    i0.ɵɵtext(28, \"* \\u05E9\\u05DD \\u05D1\\u05E2\\u05D1\\u05E8\\u05D9\\u05EA \");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(29, \"input\", 18);\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(30, AdminEditNameComponent_div_2_div_30_Template, 7, 1, \"div\", 2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(31, \"br\");\n    i0.ɵɵelementStart(32, \"div\", 4);\n    i0.ɵɵelement(33, \"div\", 8);\n    i0.ɵɵelementStart(34, \"div\", 19);\n    i0.ɵɵelement(35, \"input\", 20);\n    i0.ɵɵelementStart(36, \"label\", 21);\n    i0.ɵɵtext(37, \"Include this name (when appropriate) in submitter's davening list\");\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(38, \"div\", 22)(39, \"label\", 23);\n    i0.ɵɵtext(40, \"* Category:\");\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(41, \"div\", 8)(42, \"select\", 24)(43, \"option\", 25);\n    i0.ɵɵtext(44, \"* Select category\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(45, AdminEditNameComponent_div_2_option_45_Template, 3, 4, \"option\", 26);\n    i0.ɵɵelementEnd()()();\n    i0.ɵɵelementStart(46, \"div\", 4)(47, \"div\", 27)(48, \"button\", 28);\n    i0.ɵɵtext(49, \"Edit Name\");\n    i0.ɵɵelementEnd()()()();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(10);\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.nameForm.get(\"submitterEmail\").touched && !ctx_r1.nameForm.get(\"submitterEmail\").valid);\n    i0.ɵɵadvance(7);\n    i0.ɵɵproperty(\"ngIf\", !ctx_r1.nameForm.get(\"english\").valid && ctx_r1.nameForm.get(\"english\").touched);\n    i0.ɵɵadvance(5);\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.nameForm.get(\"category\").value == ctx_r1.banimNumber);\n    i0.ɵɵadvance(3);\n    i0.ɵɵproperty(\"ngIf\", !ctx_r1.nameForm.get(\"hebrew\").valid && ctx_r1.nameForm.get(\"hebrew\").touched);\n    i0.ɵɵadvance(5);\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.nameForm.get(\"category\").value == ctx_r1.banimNumber);\n    i0.ɵɵadvance(15);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r1.categories);\n    i0.ɵɵadvance(3);\n    i0.ɵɵproperty(\"disabled\", ctx_r1.nameForm.invalid);\n  }\n}\nexport let AdminEditNameComponent = /*#__PURE__*/(() => {\n  class AdminEditNameComponent {\n    constructor(daveningService, httpService, adminService, router) {\n      this.daveningService = daveningService;\n      this.httpService = httpService;\n      this.adminService = adminService;\n      this.router = router;\n      this.updatedInfo = null;\n      this.spouseEnglishError = false;\n      this.spouseHebrewError = false;\n    }\n    ngOnInit() {\n      this.oldInfo = this.adminService.davenforToEdit;\n      this.populateFormControls();\n      this.setForm();\n      //Populating category array from Server\n      this.categories = this.adminService.categories;\n      this.banimNumber = this.adminService.findBanim().id;\n    }\n    populateFormControls() {\n      this.english = new UntypedFormControl(this.oldInfo.nameEnglish ? this.oldInfo.nameEnglish : null, [Validators.required, Validators.pattern(this.daveningService.englishNamePattern)]);\n      this.hebrew = new UntypedFormControl(this.oldInfo.nameHebrew ? this.oldInfo.nameHebrew : null, [Validators.required, Validators.pattern(this.daveningService.hebrewNamePattern)]);\n      //spouse values can be empty or not, depending on category value (if it is banim, and even then optional), as long as they are in the right language \n      //spouse values are initialized as empty string to assist with checkSpouseEnglish() and checkSpouseHebrew(), where we now only need to check if it is an empty string or not.\n      this.spouseEnglish = new UntypedFormControl(this.oldInfo.nameEnglishSpouse ? this.oldInfo.nameEnglishSpouse : null, [Validators.pattern(this.daveningService.englishNamePattern)]);\n      this.spouseHebrew = new UntypedFormControl(this.oldInfo.nameHebrewSpouse ? this.oldInfo.nameHebrewSpouse : null, [Validators.pattern(this.daveningService.hebrewNamePattern)]);\n      this.category = new UntypedFormControl(this.oldInfo.category.id, Validators.required); //default value is 'select category'\n      this.submitterToReceive = new UntypedFormControl(this.oldInfo.submitterToReceive);\n      this.submitterEmail = new UntypedFormControl(this.oldInfo.submitterEmail ? this.oldInfo.submitterEmail : \"\", [Validators.required, Validators.email]);\n    }\n    setForm() {\n      this.nameForm = new UntypedFormGroup({\n        'english': this.english,\n        'hebrew': this.hebrew,\n        'spouseEnglish': this.spouseEnglish,\n        'spouseHebrew': this.spouseHebrew,\n        'category': this.category,\n        'submitterToReceive': this.submitterToReceive,\n        'submitterEmail': this.submitterEmail\n      });\n    }\n    onSubmit() {\n      /*If spouse name will be full and valid, will populate later.\r\n      Initializing before 'banim' condition so that recognized in 'formInfo' population below*/\n      let form = this.nameForm; //shortening references in this function\n      let updatedInfo = new Davenfor(this.oldInfo.id, form.get('submitterEmail').value, this.adminService.getCategory(form.get('category').value), form.get('hebrew').value, form.get('english').value, form.get('spouseHebrew').value, form.get('spouseEnglish').value, form.get('submitterToReceive').value, this.oldInfo.lastConfirmedAt, this.oldInfo.expireAt, this.oldInfo.createdAt, new Date().toISOString().split('T')[0]);\n      this.adminService.editDavenfor(updatedInfo);\n    }\n    cancel() {\n      this.adminService.davenforToEdit = null;\n      this.router.navigate(['admin/names']);\n    }\n    static #_ = this.ɵfac = function AdminEditNameComponent_Factory(t) {\n      return new (t || AdminEditNameComponent)(i0.ɵɵdirectiveInject(i1.DaveningService), i0.ɵɵdirectiveInject(i2.HttpService), i0.ɵɵdirectiveInject(i3.AdminService), i0.ɵɵdirectiveInject(i4.Router));\n    };\n    static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: AdminEditNameComponent,\n      selectors: [[\"app-admin-edit-name\"]],\n      decls: 3,\n      vars: 3,\n      consts: [[1, \"form-horizontal\", 3, \"formGroup\", \"ngSubmit\"], [\"style\", \"text-align: center\", 4, \"ngIf\"], [4, \"ngIf\"], [2, \"text-align\", \"center\"], [1, \"form-group\"], [1, \"col-xs-6\", \"col-md-offset-2\"], [1, \"col-md-2\", \"col-md-offset-2\"], [\"type\", \"button\", 1, \"btn\", \"btn-danger\", \"btn-md\", 3, \"click\"], [1, \"col-xs-2\"], [\"class\", \"help-block\", 4, \"ngIf\"], [1, \"col-xs-10\", \"input-box\"], [\"for\", \"submitterEmail\"], [\"type\", \"text\", \"id\", \"submitterEmail\", \"placeholder\", \"Email to receive notifications\", \"formControlName\", \"submitterEmail\", 1, \"form-control\"], [1, \"col-xs-2\", \"help-block\"], [1, \"col-xs-3\", \"input-box\"], [\"for\", \"english\"], [\"type\", \"text\", \"id\", \"english\", \"formControlName\", \"english\", 1, \"form-control\"], [\"for\", \"hebrew\"], [\"type\", \"text\", \"id\", \"hebrew\", \"formControlName\", \"hebrew\", 1, \"form-control\"], [1, \"col-xs-5\", \"form-check\"], [\"type\", \"checkbox\", \"id\", \"submitterToReceive\", \"formControlName\", \"submitterToReceive\", 1, \"form-check-input\", 2, \"margin\", \"5px\"], [\"for\", \"submitterToReceive\", 1, \"form-check-label\", \"text-center\"], [1, \"col-xs-1\"], [\"for\", \"category\"], [\"formControlName\", \"category\", \"id\", \"category\", 1, \"form-control\"], [\"value\", \"\"], [3, \"value\", 4, \"ngFor\", \"ngForOf\"], [1, \"col-xs-12\", \"text-center\"], [\"type\", \"submit\", 1, \"btn\", \"btn-success\", \"btn-lg\", 3, \"disabled\"], [1, \"help-block\"], [\"class\", \"text-right\", 4, \"ngIf\"], [1, \"text-right\"], [\"for\", \"spouseEnglish\"], [\"type\", \"text\", \"id\", \"spouseEnglish\", \"formControlName\", \"spouseEnglish\", 1, \"form-control\"], [\"for\", \"spouseHebrew\"], [\"type\", \"text\", \"id\", \"spouseHebrew\", \"formControlName\", \"spouseHebrew\", 1, \"form-control\"], [3, \"value\"]],\n      template: function AdminEditNameComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelementStart(0, \"form\", 0);\n          i0.ɵɵlistener(\"ngSubmit\", function AdminEditNameComponent_Template_form_ngSubmit_0_listener() {\n            return ctx.onSubmit();\n          });\n          i0.ɵɵtemplate(1, AdminEditNameComponent_div_1_Template, 2, 0, \"div\", 1);\n          i0.ɵɵtemplate(2, AdminEditNameComponent_div_2_Template, 50, 7, \"div\", 2);\n          i0.ɵɵelementEnd();\n        }\n        if (rf & 2) {\n          i0.ɵɵproperty(\"formGroup\", ctx.nameForm);\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"ngIf\", ctx.adminService.loading);\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"ngIf\", !ctx.adminService.loading);\n        }\n      },\n      dependencies: [i5.NgForOf, i5.NgIf, i6.ɵNgNoValidate, i6.NgSelectOption, i6.ɵNgSelectMultipleOption, i6.DefaultValueAccessor, i6.CheckboxControlValueAccessor, i6.SelectControlValueAccessor, i6.NgControlStatus, i6.NgControlStatusGroup, i6.FormGroupDirective, i6.FormControlName, i7.LoadingSpinnerComponent, i5.TitleCasePipe],\n      styles: [\".form-horizontal[_ngcontent-%COMP%]{margin:3em}.help-block[_ngcontent-%COMP%], .alert-option[_ngcontent-%COMP%]{color:red;margin-bottom:0}.text-right[_ngcontent-%COMP%]{float:right}select[_ngcontent-%COMP%]{text-align-last:center}.input-box[_ngcontent-%COMP%]{width:300px}.form-control[_ngcontent-%COMP%]{font-weight:500}\"]\n    });\n  }\n  return AdminEditNameComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}