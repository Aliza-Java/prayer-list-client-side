{"ast":null,"code":"import { Subject } from 'rxjs';\nimport { Davenfor } from '../shared/models/davenfor.model';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"../shared/services/http.service\";\nimport * as i3 from \"../shared/services/davening.service\";\nexport let GuestService = /*#__PURE__*/(() => {\n  class GuestService {\n    constructor(router, httpService, daveningService) {\n      this.router = router;\n      this.httpService = httpService;\n      this.daveningService = daveningService;\n      this.myDavenforsChanged = new Subject();\n      this.davenforAdded = new Subject();\n      this.loadedDavenfors = false;\n      this.davenforToEdit = null;\n      this.loading = false;\n      this.populateCategories();\n    }\n    getCategory(id) {\n      //double equal sign (instead of triple) since incoming id is a string while category.id is a number.\n      return this.categories.find(category => category.id == id);\n    }\n    findBanim() {\n      let banim = null;\n      this.categories.forEach(category => {\n        if (category.english === 'banim') banim = category;\n      });\n      return banim;\n    }\n    populateCategories() {\n      this.httpService.getCategories().subscribe(categories => {\n        this.categories = categories;\n      }, error => {\n        console.log(error);\n      });\n    }\n    populateGuestDavenfors() {\n      this.loading = true;\n      this.httpService.getDavenfors('sub/getmynames/' + this.guestEmail).subscribe(names => {\n        this.myDavenfors = names;\n        this.myDavenforsChanged.next(names);\n        //buzz the event, so every subscribing component reacts accordingly.\n        this.loading = false;\n      }, error => {\n        this.daveningService.errorMessage = `We could not retrieve names associated with ${this.guestEmail}`;\n        this.loading = false;\n      });\n    }\n    deleteDavenfor(davenforId, englishName) {\n      this.loading = true;\n      this.httpService.deleteDavenfor(`sub/delete/${davenforId}/${this.guestEmail}`).subscribe(updatedList => {\n        this.myDavenfors = updatedList;\n        this.myDavenforsChanged.next(updatedList);\n        this.daveningService.successMessage = `The name '${englishName}' has been deleted`;\n        this.loading = false;\n      }, error => {\n        this.daveningService.errorMessage = `There was a problem deleting the name \"${englishName}\"`;\n        console.log(error);\n        this.loading = false;\n      });\n    }\n    addDavenfor(basicInfo) {\n      const today = new Date().toISOString().split('T')[0]; //used multiple times in the new Davenfor.\n      const newDavenfor = new Davenfor(-1, basicInfo.submitterEmail,\n      //need to fix this!\n      basicInfo.category, basicInfo.nameHebrew, basicInfo.nameEnglish, basicInfo.nameHebrewSpouse, basicInfo.nameEnglishSpouse, basicInfo.submitterToReceive, today,\n      //lastConfirmedAt\n      null,\n      //expireAt: server will set the right one\n      today,\n      //createdAt\n      today); //updatedAt\n      this.loading = true;\n      this.httpService.addDavenfor(basicInfo.submitterEmail, newDavenfor).subscribe(() => {\n        this.populateGuestDavenfors();\n        this.davenforAdded.next(true); //to have guest and admin home pages route accordingly to the names list   \n        this.loading = false;\n        this.router.navigate(['guest/names']); //Guest probably wants to add just one name, returning to list             \n      }, error => {\n        this.daveningService.errorMessage = `We are sorry.  There was an error adding the name \"${basicInfo.nameEnglish}\"`;\n        console.log(error);\n        this.loading = false;\n      });\n    }\n    editDavenfor(davenfor) {\n      davenfor.submitterEmail = this.guestEmail;\n      this.loading = true;\n      this.httpService.editDavenfor('sub/updatename/' + this.guestEmail, davenfor).subscribe(response => {\n        this.populateGuestDavenfors();\n        this.loading = false;\n        this.router.navigate(['guest/names']);\n      }, error => {\n        this.daveningService.errorMessage = \"We are sorry. There was an error when saving the new edits.\";\n        this.loading = false;\n      });\n    }\n    static #_ = this.ɵfac = function GuestService_Factory(t) {\n      return new (t || GuestService)(i0.ɵɵinject(i1.Router), i0.ɵɵinject(i2.HttpService), i0.ɵɵinject(i3.DaveningService));\n    };\n    static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: GuestService,\n      factory: GuestService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n  return GuestService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}