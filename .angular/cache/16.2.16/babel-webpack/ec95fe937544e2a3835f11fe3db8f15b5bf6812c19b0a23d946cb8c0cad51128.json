{"ast":null,"code":"import * as i0 from \"@angular/core\";\nexport let DropdownDirective = /*#__PURE__*/(() => {\n  class DropdownDirective {\n    //dropdown is closable only if it itself is reclicked.\n    /* @HostListener('click') toggleOpen(eventData: Event) {\r\n             this.toggleFlag=!this.toggleFlag;\r\n    } */\n    //dropdown is closable from any part of the document\n    toggleOpen(event) {\n      this.toggleFlag = this.elRef.nativeElement.contains(event.target) ? !this.toggleFlag : false;\n    }\n    constructor(elRef) {\n      this.elRef = elRef;\n      this.toggleFlag = false;\n    }\n    static #_ = this.ɵfac = function DropdownDirective_Factory(t) {\n      return new (t || DropdownDirective)(i0.ɵɵdirectiveInject(i0.ElementRef));\n    };\n    static #_2 = this.ɵdir = /*@__PURE__*/i0.ɵɵdefineDirective({\n      type: DropdownDirective,\n      selectors: [[\"\", \"appDropdown\", \"\"]],\n      hostVars: 2,\n      hostBindings: function DropdownDirective_HostBindings(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵlistener(\"click\", function DropdownDirective_click_HostBindingHandler($event) {\n            return ctx.toggleOpen($event);\n          }, false, i0.ɵɵresolveDocument);\n        }\n        if (rf & 2) {\n          i0.ɵɵclassProp(\"open\", ctx.toggleFlag);\n        }\n      }\n    });\n  }\n  return DropdownDirective;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}