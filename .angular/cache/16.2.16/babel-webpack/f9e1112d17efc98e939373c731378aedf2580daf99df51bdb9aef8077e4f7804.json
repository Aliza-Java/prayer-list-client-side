{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { UntypedFormControl, UntypedFormGroup, Validators } from '@angular/forms';\nimport { SimpleDavenfor } from '../../../shared/models/simple-davenfor.model';\nlet GuestSubmitNameComponent = class GuestSubmitNameComponent {\n  constructor(router, guestService, daveningService, httpService) {\n    this.router = router;\n    this.guestService = guestService;\n    this.daveningService = daveningService;\n    this.httpService = httpService;\n    this.chosenCategoryId = -1;\n    this.spouseEnglishError = false;\n    this.spouseHebrewError = false;\n  }\n  ngOnInit() {\n    this.createFormControls();\n    this.createForm();\n    //Populating category array from Server\n    // TODO: fix this when can get from server: this.categories = this.guestService.categories;\n    this.categories = [{\n      id: 1,\n      english: \"Refua\"\n    }, {\n      id: 2,\n      english: \"Banim\"\n    }, {\n      id: 3,\n      english: \"Shidduchim\"\n    }, {\n      id: 4,\n      english: \"Soldiers\"\n    }, {\n      id: 5,\n      english: \"Yeshuah\"\n    }];\n    this.banimNumber = this.guestService.findBanim().id;\n  }\n  createFormControls() {\n    this.name1English = new UntypedFormControl(null, [Validators.required, Validators.pattern(this.daveningService.englishNamePattern)]);\n    this.benbat = new UntypedFormControl('ben');\n    this.name2English = new UntypedFormControl(null, [Validators.required, Validators.pattern(this.daveningService.englishNamePattern)]);\n    this.name1Hebrew = new UntypedFormControl(null, [Validators.required, Validators.pattern(this.daveningService.hebrewNamePattern)]);\n    this.benbatHebrew = new UntypedFormControl('בן');\n    this.name2Hebrew = new UntypedFormControl(null, [Validators.required, Validators.pattern(this.daveningService.hebrewNamePattern)]);\n    //spouse values can be empty or not, depending on category value (if it is banim, and even then optional), as long as they are in the right language \n    //spouse values are initialized as empty string to assist with checkSpouseEnglish() and checkSpouseHebrew(), where we now only need to check if it is an empty string or not.\n    this.spouseName1English = new UntypedFormControl(\"\", Validators.pattern(this.daveningService.englishNamePattern));\n    this.spouseName2English = new UntypedFormControl(\"\", Validators.pattern(this.daveningService.englishNamePattern));\n    this.spouseName1Hebrew = new UntypedFormControl(\"\", Validators.pattern(this.daveningService.hebrewNamePattern));\n    this.spouseName2Hebrew = new UntypedFormControl(\"\", Validators.pattern(this.daveningService.hebrewNamePattern));\n    this.category = new UntypedFormControl(\"\", Validators.required); //default value is 'select category'\n    this.submitterToReceive = new UntypedFormControl(true);\n  }\n  createForm() {\n    this.nameForm = new UntypedFormGroup({\n      'name': new UntypedFormGroup({\n        'english1': this.name1English,\n        'benBat': this.benbat,\n        'english2': this.name2English,\n        'hebrew1': this.name1Hebrew,\n        'benBatHebrew': this.benbatHebrew,\n        'hebrew2': this.name2Hebrew\n      }),\n      'spouse': new UntypedFormGroup({\n        'english1': this.spouseName1English,\n        'english2': this.spouseName2English,\n        'hebrew1': this.spouseName1Hebrew,\n        'hebrew2': this.spouseName2Hebrew\n      }),\n      'category': this.category,\n      'submitterToReceive': this.submitterToReceive\n    });\n  }\n  onSubmit() {\n    /*If spouse name will be full and valid, will populate later.\r\n    Initializing before 'banim' condition so that recognized in 'formInfo' population below    */\n    let spouseEnglishFull = \"\";\n    let spouseHebrewFull = \"\";\n    let form = this.nameForm; //shortening all references in this function\n    const chosenCategory = this.guestService.getCategory(form.get('category').value);\n    const englishName = form.get('name.english1').value + \" \" + form.get('name.benBat').value + \" \" + form.get('name.english2').value;\n    const hebrewName = form.get('name.hebrew1').value + \" \" + form.get('name.benBatHebrew').value + \" \" + form.get('name.hebrew2').value;\n    let submitterEmail = this.guestService.guestEmail;\n    let submitterToReceive = form.get('submitterToReceive').value;\n    if (chosenCategory.english === \"banim\") {\n      //overriding an input such as \"null בן null\", filling only if have name in both parts of spouse name. (English and Hebrew independent)\n      let spouseEnglish1 = form.get('spouse.english1').value;\n      let spouseEnglish2 = form.get('spouse.english2').value;\n      let spouseHebrew1 = form.get('spouse.hebrew1').value;\n      let spouseHebrew2 = form.get('spouse.hebrew2').value;\n      if (spouseEnglish1 && spouseEnglish2) spouseEnglishFull = `${spouseEnglish1} ben ${spouseEnglish2}`; //It must be ben, as it is the husband\n      if (spouseHebrew1 && spouseHebrew2) spouseHebrewFull = `${spouseHebrew2} בן ${spouseHebrew1}`;\n    }\n    let formInfo = new SimpleDavenfor(chosenCategory, submitterEmail, hebrewName, englishName, spouseHebrewFull, spouseEnglishFull, submitterToReceive);\n    alert(formInfo);\n    console.log(formInfo);\n    this.guestService.addDavenfor(formInfo);\n  }\n  checkSpouseEnglish() {\n    if (!this.spouseName1English.value && this.spouseName2English.value || !this.spouseName2English.value && this.spouseName1English.value) {\n      this.spouseEnglishError = true;\n    } else this.spouseEnglishError = false;\n  }\n  checkSpouseHebrew() {\n    if (!this.spouseName1Hebrew.value && this.spouseName2Hebrew.value || !this.spouseName2Hebrew.value && this.spouseName1Hebrew.value) {\n      this.spouseHebrewError = true;\n    } else this.spouseHebrewError = false;\n  }\n  cancel() {\n    this.router.navigate(['guest/names']);\n  }\n};\nGuestSubmitNameComponent = __decorate([Component({\n  selector: 'app-guest-submit-name',\n  templateUrl: './guest-submit-name.component.html',\n  styleUrls: ['./guest-submit-name.component.css']\n})], GuestSubmitNameComponent);\nexport { GuestSubmitNameComponent };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}