{"ast":null,"code":"import { Subject } from 'rxjs';\nimport { Submitter } from '../models/submitter.model';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\nexport let HttpService = /*#__PURE__*/(() => {\n  class HttpService {\n    constructor(http, router) {\n      this.http = http;\n      this.router = router;\n      this.localhostUrl = \"http://localhost:8080/dlist/\";\n      //change baseUrl depending on the server location\n      this.baseUrl = this.localhostUrl;\n      this.davenforAdded = new Subject();\n    }\n    login(email, password) {\n      const adminCredentials = {\n        \"username\": email,\n        \"password\": password\n      };\n      return this.http.post(this.baseUrl + 'auth/signin', adminCredentials, {\n        withCredentials: true\n      });\n    }\n    getAdminSettings(email) {\n      return this.http.get(`${this.baseUrl}admin/settings/${email}`, {\n        withCredentials: true\n      });\n    }\n    getDavenfors(url) {\n      return this.http.get(this.baseUrl + url);\n    }\n    editDavenfor(url, davenfor) {\n      return this.http.put(this.baseUrl + url, davenfor);\n    }\n    //separated from submitter's editDavenfor mainly because of return type\n    adminEditDavenfor(url, davenfor) {\n      return this.http.put(this.baseUrl + url, davenfor);\n    }\n    deleteDavenfor(url) {\n      return this.http.delete(this.baseUrl + url);\n    }\n    addDavenfor(submitterEmail, newDavenfor) {\n      console.log(newDavenfor);\n      return this.http.post(this.baseUrl + 'sub/' + submitterEmail, newDavenfor);\n    }\n    getDaveners() {\n      return this.http.get(this.baseUrl + 'admin/daveners');\n    }\n    deleteDavener(davenerId) {\n      return this.http.delete(`${this.baseUrl}admin/davener/${davenerId}`, {\n        withCredentials: true\n      });\n    }\n    disactivateDavener(davener) {\n      return this.http.post(this.baseUrl + 'admin/disactivate/' + davener.email, null, {\n        withCredentials: true\n      });\n    }\n    activateDavener(davener) {\n      return this.http.post(this.baseUrl + 'admin/activate/' + davener.email, null, {\n        withCredentials: true\n      });\n    }\n    getCategories() {\n      return this.http.get(this.baseUrl + 'sub/categories');\n    }\n    addDavener(davenerToAdd) {\n      return this.http.post(this.baseUrl + 'admin/davener', davenerToAdd, {\n        withCredentials: true\n      });\n    }\n    editDavener(davener) {\n      return this.http.put(this.baseUrl + 'admin/davener', davener, {\n        withCredentials: true\n      });\n    }\n    getParashot() {\n      return this.http.get(this.baseUrl + 'admin/parashot');\n    }\n    getCurrentParasha() {\n      return this.http.get(this.baseUrl + 'admin/parasha');\n    }\n    getCurrentCategory() {\n      return this.http.get(this.baseUrl + 'admin/category');\n    }\n    verify(password, email) {\n      const passwordAsJson = {\n        'password': password\n      };\n      return this.http.post(this.baseUrl + 'admin/checkpass/' + email, passwordAsJson, {\n        withCredentials: true\n      });\n    }\n    sendWeekly(weeklyInfo) {\n      return this.http.post(this.baseUrl + 'admin/weekly/', weeklyInfo);\n    }\n    preview(weeklyInfo) {\n      return this.http.post(this.baseUrl + 'admin/preview', weeklyInfo, {\n        responseType: 'text',\n        withCredentials: true\n      });\n    }\n    getSubmitter(submitterEmail) {\n      return new Submitter(1, \"myName\", \"submitter@smail.com\", 101101, 101102, []);\n    }\n    sendUrgent(urgentDavenfor) {\n      return this.http.post(this.baseUrl + 'admin/urgent', urgentDavenfor);\n    }\n    editAdminSettings(settings) {\n      return this.http.put(this.baseUrl + 'admin/update', settings, {\n        withCredentials: true\n      });\n    }\n    static #_ = this.ɵfac = function HttpService_Factory(t) {\n      return new (t || HttpService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Router));\n    };\n    static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: HttpService,\n      factory: HttpService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n  return HttpService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}